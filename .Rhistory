{modelo_final <- flujo_ajustado_logistico_tune}
if (eleccion_modelo == "logistico")
{modelo_final <- flujo_ajustado_logistico}
if (eleccion_modelo == "arboles_con_tuning")
{modelo_final <- flujo_ajustado_arboles_tune}
if (eleccion_modelo == "arboles")
{modelo_final <- flujo_ajustado_arboles}
if (eleccion_modelo == "bagging")
{modelo_final <- flujo_ajustado_bag}
modelo_final
hoteles_prueba <- read.csv("Datos/prueba.csv")
hoteles_prueba <- hoteles_prueba |>
#Transformaciones
mutate(
#Variables de caracteres
agent = ifelse(agent %in% new_ca == TRUE, agent,
ifelse(agent %in% new_ca_buenos == TRUE, "BUENO",
ifelse(agent %in% new_ca_malos == TRUE, "MALO","otros"))),
assigned_room_type = ifelse(assigned_room_type  %in% c("L","P"), "otros", assigned_room_type),
company = ifelse(company %in% new_ccs == TRUE, company,
ifelse(company %in% new_ccs_buenos == TRUE, "BUENO","otros")),
country = ifelse(country %in% new_cc == TRUE, country,
ifelse(country %in% new_cc_buenos == TRUE, "BUENO", "otros")),
distribution_channel = ifelse(distribution_channel == "Undefined", "otros", distribution_channel),
market_segment = ifelse(market_segment == "Undefined", "otros", market_segment),
) |>
#Variables derivadas
mutate(
#Variables de caracteres
cat_adults = cut(adults,
breaks =c(0,1,2,Inf), include.lowest = T),
cat_stays_in_week_nights = cut(stays_in_week_nights,
breaks = c(-1,0,5,9,Inf), include.lowest = T),
cat_stays_in_weekend_nights = cut(stays_in_weekend_nights,
breaks = c(-1,0,1,2,3,Inf), include.lowest = T),
cat_previous_cancellations = cut(previous_cancellations,
breaks = c(-1,0,1,5,Inf), include.lowest = T),
cat_previous_bookings_not_canceled = cut(previous_bookings_not_canceled,
breaks = c(-1,0,9,15,Inf), include.lowest = T),
cat_total_of_special_requests = cut(total_of_special_requests,
breaks = c(-1,0, 1, 2, 3, Inf), include.lowest = T),
cat_required_car_parking_spaces = cut(required_car_parking_spaces,
breaks = c(-1,0, Inf), include.lowest = T),
cat_booking_changes = cut(booking_changes, breaks = c(-1,0, Inf), include.lowest = T),
cat_babies = cut(babies, breaks = c(-1,0,Inf), include.lowest = T),
#Variables numericas
log_adr = log(1+adr),
log_lead_time = log(1+lead_time),
costo_total = ifelse(stays_in_week_nights + stays_in_weekend_nights == 0, 0,
(stays_in_week_nights+stays_in_weekend_nights)*adr),
log_costo_total = log(1+costo_total),
igual_reservado = ifelse(reserved_room_type == assigned_room_type, 1,0)
) |>
#Conversion a factores
mutate(
#Variables de tiempo
arrival_date_year = factor(arrival_date_year),
arrival_date_month = factor(arrival_date_month),
arrival_date_week_number = factor(arrival_date_week_number),
#Variables de caracteres
agent = factor(agent),
company = factor(company),
country = factor(country),
assigned_room_type = factor(assigned_room_type),
customer_type = factor(customer_type),
distribution_channel = factor(distribution_channel),
hotel = factor(hotel),
market_segment = factor(market_segment),
meal = factor(meal),
deposit_type = factor(deposit_type),
cat_adults = factor(cat_adults),
cat_stays_in_week_nights = factor(cat_stays_in_week_nights),
cat_stays_in_weekend_nights = factor(cat_stays_in_weekend_nights),
cat_previous_cancellations = factor(cat_previous_cancellations),
cat_previous_bookings_not_canceled = factor(cat_previous_bookings_not_canceled),
cat_total_of_special_requests = factor(cat_total_of_special_requests),
cat_required_car_parking_spaces = factor(cat_required_car_parking_spaces),
cat_booking_changes = factor(cat_booking_changes),
cat_babies = factor(cat_babies)
#Variables numericas
# is_repeated_guest = factor(is_repeated_guest),
# days_in_waiting_list = log(days_in_waiting_list+1E-16),
# booking_changes = log(booking_changes+1E-16)
)
# Si ninios es NA entonces se va a 0 (la mediana), solo hay 4 NA.
hoteles_prueba$children[is.na(hoteles_prueba$children)] <- 0
submission <- tibble(id = hoteles_prueba$id,
prob = predict(modelo_final, hoteles_prueba, type = "prob")$.pred_cancelado )
write.table(submission , file = "submission_1.csv", row.names = FALSE, sep = ",")
# install.packages("entropy")
library(tidyverse)
library(tidymodels)
library(rsample)
library(patchwork)
library(entropy)
source("hoteles_aux.R")
knitr::opts_chunk$set(echo = TRUE)
hoteles_ent |>
pull(country) |>
levels()
hoteles_prueba |>
pull(country) |>
levels()
hoteles_split = initial_split(hoteles, prop = 1)
hoteles_split = initial_split(hoteles, prop = 0.99)
# hoteles_split = initial_split(hoteles, prop = 0.80)
# hoteles_split = initial_time_split(hoteles, prop = 0.80)
hoteles_ent <- training(hoteles_split)
rbind(
training(hoteles_split)  |> tail(5) |> select(fecha),
testing(hoteles_split)  |> head(5) |> select(fecha)
)
receta_hoteles <- recipe(is_canceled ~
# #Variables categoricas
#
arrival_date_year +                #Chance afecta
arrival_date_month +
arrival_date_week_number +
#
customer_type +
hotel +
meal +
market_segment +
distribution_channel +
reserved_room_type +
assigned_room_type +
deposit_type +
country +
agent +
company +
# cat_adults +
# cat_stays_in_week_nights +
# cat_stays_in_weekend_nights +
# cat_previous_cancellations +
# cat_previous_bookings_not_canceled +
# cat_total_of_special_requests +
# cat_required_car_parking_spaces +
# cat_booking_changes +
# cat_babies +
#Variables numericas
is_repeated_guest +
igual_reservado +
adults +                           #Mejor la categorica
stays_in_week_nights +             #Mejor la categorica
stays_in_weekend_nights +          #Mejor la categorica
previous_cancellations +           #Mejor la categorica
previous_bookings_not_canceled +   #Mejor la categorica
total_of_special_requests +        #Mejor la categorica
required_car_parking_spaces +      #Mejor la categorica
booking_changes +                  #Mejor la categorica
babies +                           #Muy poca informacion
children +                         #Muy poca informacion
days_in_waiting_list +             #Muy ruidosa
# adr +                              #Mejor log
log_adr +
# lead_time +                        #Mejor log
log_lead_time+
# # costo_total +                      #Mejor log
log_costo_total
#
, data = hoteles_ent) |>
# Nuevos
#
# step_novel(arrival_date_year, new_level = paste0(most_common(hoteles_ent, "arrival_date_month"),"_")) |>                #Chance afecta
# step_novel(arrival_date_month, new_level = paste0(most_common(hoteles_ent,"arrival_date_month"),"_")) |>
# step_novel(arrival_date_week_number, new_level = paste0(most_common(hoteles_ent,"arrival_date_week_number"),"_")) |>
#
# step_novel(customer_type, new_level = paste0(most_common(hoteles_ent,"customer_type"),"_")) |>
# step_novel(hotel, new_level = paste0(most_common(hoteles_ent,"hotel"),"_")) |>
# step_novel(meal, new_level = paste0(most_common(hoteles_ent,"meal"),"_")) |>
# step_novel(market_segment, new_level = paste0(most_common(hoteles_ent,"market_segment"),"_")) |>
# step_novel(distribution_channel, new_level = paste0(most_common(hoteles_ent,"distribution_channel"),"_")) |>
# step_novel(reserved_room_type, new_level = paste0(most_common(hoteles_ent,"reserved_room_type"),"_")) |>
# step_novel(assigned_room_type, new_level = paste0(most_common(hoteles_ent,"assigned_room_type"),"_")) |>
# step_novel(deposit_type, new_level = paste0(most_common(hoteles_ent,"deposit_type"),"_")) |>
# step_novel(country, new_level = paste0(most_common(hoteles_ent,"country"),"_")) |>
# step_novel(agent, new_level = paste0(most_common(hoteles_ent,"agent"),"_")) |>
# step_novel(company, new_level = paste0(most_common(hoteles_ent,"company"),"_")) |>
# step_novel(cat_adults, new_level = paste0(most_common(hoteles_ent,"cat_adults"),"_")) |>
# step_novel(cat_stays_in_week_nights, new_level = paste0(most_common(hoteles_ent,"cat_stays_in_week_nights"),"_")) |>
# step_novel(cat_stays_in_weekend_nights, new_level = paste0(most_common(hoteles_ent,"cat_stays_in_weekend_nights"),"_")) |>
# step_novel(cat_previous_cancellations, new_level = paste0(most_common(hoteles_ent,"cat_previous_cancellations"),"_")) |>
# step_novel(cat_previous_bookings_not_canceled, new_level = paste0(most_common(hoteles_ent,"cat_previous_bookings_not_canceled"),"_")) |>
# step_novel(cat_total_of_special_requests, new_level = paste0(most_common(hoteles_ent,"cat_total_of_special_requests"),"_")) |>
# step_novel(cat_required_car_parking_spaces, new_level = paste0(most_common(hoteles_ent,"cat_required_car_parking_spaces"),"_")) |>
# step_novel(cat_booking_changes, new_level = paste0(most_common(hoteles_ent,"cat_booking_changes"),"_")) |>
# step_novel(cat_babies, new_level = paste0(most_common(hoteles_ent,"cat_babies"),"_")) |>
# Otros
#
# step_other(arrival_date_year, threshold = 0.001, other = most_common(hoteles_ent, "arrival_date_month")) |>                #Chance afecta
# step_other(arrival_date_month, threshold = 0.001, other = most_common(hoteles_ent,"arrival_date_month")) |>
# step_other(arrival_date_week_number, threshold = 0.001, other = most_common(hoteles_ent,"arrival_date_week_number")) |>
#
# step_other(customer_type, threshold = 0.001, other = most_common(hoteles_ent,"customer_type")) |>
# step_other(hotel, threshold = 0.001, other = most_common(hoteles_ent,"hotel")) |>
# step_other(meal, threshold = 0.001, other = most_common(hoteles_ent,"meal")) |>
# step_other(market_segment, threshold = 0.001, other = most_common(hoteles_ent,"market_segment")) |>
# step_other(distribution_channel, threshold = 0.001, other = most_common(hoteles_ent,"distribution_channel")) |>
# step_other(reserved_room_type, threshold = 0.001, other = most_common(hoteles_ent,"reserved_room_type")) |>
# step_other(assigned_room_type, threshold = 0.001, other = most_common(hoteles_ent,"assigned_room_type")) |>
# step_other(deposit_type, threshold = 0.001, other = most_common(hoteles_ent,"deposit_type")) |>
# step_other(country, threshold = 0.001, other = most_common(hoteles_ent,"country")) |>
# step_other(agent, threshold = 0.001, other = most_common(hoteles_ent,"agent")) |>
# step_other(company, threshold = 0.001, other = most_common(hoteles_ent,"company")) |>
# step_other(cat_adults, threshold = 0.001, other = most_common(hoteles_ent,"cat_adults")) |>
# step_other(cat_stays_in_week_nights, threshold = 0.001, other = most_common(hoteles_ent,"cat_stays_in_week_nights")) |>
# step_other(cat_stays_in_weekend_nights, threshold = 0.001, other = most_common(hoteles_ent,"cat_stays_in_weekend_nights")) |>
# step_other(cat_previous_cancellations, threshold = 0.001, other = most_common(hoteles_ent,"cat_previous_cancellations")) |>
# step_other(cat_previous_bookings_not_canceled, threshold = 0.001, other = most_common(hoteles_ent,"cat_previous_bookings_not_canceled")) |>
# step_other(cat_total_of_special_requests, threshold = 0.001, other = most_common(hoteles_ent,"cat_total_of_special_requests")) |>
# step_other(cat_required_car_parking_spaces, threshold = 0.001, other = most_common(hoteles_ent,"cat_required_car_parking_spaces")) |>
# step_other(cat_booking_changes, threshold = 0.001, other = most_common(hoteles_ent,"cat_booking_changes")) |>
# step_other(cat_babies, threshold = 0.001, other = most_common(hoteles_ent,"cat_babies")) |>
# Desconocidos
# step_unknown(arrival_date_year, new_level = "nuevo") |>                #Chance afecta
# step_unknown(arrival_date_month, new_level = "nuevo_arrival_date_month") |>
# step_unknown(arrival_date_week_number, new_level = "nuevo_arrival_date_week_number") |>
#
# step_unknown(customer_type, new_level = "nuevo_customer_type") |>
# step_unknown(hotel, new_level = "nuevo_hotel") |>
# step_unknown(meal, new_level = "nuevo_meal") |>
# step_unknown(market_segment, new_level = "nuevo-market_segment") |>
# step_unknown(distribution_channel, new_level = "nuevo_distribution_channel") |>
# step_unknown(reserved_room_type, new_level = "nuevo_reserved_room_type") |>
# step_unknown(assigned_room_type, new_level = "nuevo_assigned_room_type") |>
# step_unknown(deposit_type, new_level = "nuevo_deposit_type") |>
# step_unknown(country, new_level = "nuevo_country") |>
# step_unknown(agent, new_level = "nuevo_agent") |>
# step_unknown(company, new_level = "nuevo_company") |>
# step_unknown(cat_adults, new_level = "nuevo_cat_adults") |>
# step_unknown(cat_stays_in_week_nights, new_level = "nuevo_cat_stays_in_week_nights") |>
# step_unknown(cat_stays_in_weekend_nights, new_level = "nuevo_cat_stays_in_weekend_nights") |>
# step_unknown(cat_previous_cancellations, new_level = "nuevo_cat_previous_cancellations") |>
# step_unknown(cat_previous_bookings_not_canceled, new_level = "nuevo_cat_previous_bookings_not_canceled") |>
# step_unknown(cat_total_of_special_requests, new_level = "nuevo_cat_total_of_special_requests") |>
# step_unknown(cat_required_car_parking_spaces, new_level = "nuevo_cat_required_car_parking_spaces") |>
# step_unknown(cat_booking_changes, new_level = "nuevo_cat_booking_changes") |>
# step_unknown(cat_babies, new_level = "nuevo_cat_babies") |>
# # step_unknown(all_nominal(), new_level = "otros") %>% #faltantes en categoria nueva
#
#Relevel
# step_relevel(arrival_date_year, ref_level = most_common(hoteles_ent,"arrival_date_year")) |>                #Chance afecta
# step_relevel(arrival_date_month, ref_level = most_common(hoteles_ent,"arrival_date_month")) |>
# step_relevel(arrival_date_week_number, ref_level = most_common(hoteles_ent,"arrival_date_week_number")) |>
#
# step_relevel(customer_type, ref_level = most_common(hoteles_ent,"customer_type")) |>
# step_relevel(hotel, ref_level = most_common(hoteles_ent,"hotel")) |>
# step_relevel(meal,  ref_level = most_common(hoteles_ent,"meal")) |>
# step_relevel(market_segment, ref_level = most_common(hoteles_ent,"market_segment")) |>
# step_relevel(distribution_channel, ref_level = most_common(hoteles_ent,"distribution_channel")) |>
# step_relevel(reserved_room_type, ref_level = most_common(hoteles_ent,"reserved_room_type")) |>
# step_relevel(assigned_room_type, ref_level = most_common(hoteles_ent,"assigned_room_type")) |>
# step_relevel(deposit_type, ref_level = most_common(hoteles_ent,"deposit_type")) |>
# step_relevel(country, ref_level = most_common(hoteles_ent,"country")) |>
# step_relevel(agent, ref_level = most_common(hoteles_ent,"agent")) |>
# step_relevel(company, ref_level = most_common(hoteles_ent,"company")) |>
#
# step_relevel(cat_adults, ref_level = most_common(hoteles_ent,"cat_adults")) |>
# step_relevel(cat_stays_in_week_nights, ref_level = most_common(hoteles_ent,"cat_stays_in_week_nights")) |>
# step_relevel(cat_stays_in_weekend_nights, ref_level = most_common(hoteles_ent,"cat_stays_in_weekend_nights")) |>
# step_relevel(cat_previous_cancellations, ref_level = most_common(hoteles_ent,"cat_previous_cancellations")) |>
# step_relevel(cat_previous_bookings_not_canceled, ref_level = most_common(hoteles_ent,"cat_previous_bookings_not_canceled")) |>
# step_relevel(cat_total_of_special_requests, ref_level = most_common(hoteles_ent,"cat_total_of_special_requests")) |>
# step_relevel(cat_required_car_parking_spaces, ref_level = "most_common(hoteles_ent,"cat_required_car_parking_spaces")) |>
# step_relevel(cat_booking_changes, ref_level = most_common(hoteles_ent,"cat_booking_changes")) |>
# step_relevel(cat_babies, ref_level = most_common(hoteles_ent,"cat_babies")) |>
# # step_unknown(all_nominal(), new_level = "otros") %>% #faltantes en categoria nueva
#Normalize
step_normalize(
is_repeated_guest,
igual_reservado,
adults,                          #Mejor la categorica
stays_in_week_nights,         #Mejor la categorica
stays_in_weekend_nights,        #Mejor la categorica
previous_cancellations,       #Mejor la categorica
previous_bookings_not_canceled,  #Mejor la categorica
total_of_special_requests,        #Mejor la categorica
required_car_parking_spaces,      #Mejor la categorica
booking_changes,                 #Mejor la categorica
babies,                          #Muy poca informacion
children,                         #Muy poca informacion
days_in_waiting_list,           #Muy ruidosa
# adr,                             #Mejor log
log_adr,
# lead_time,                       #Mejor log
log_lead_time,
# # costo_total,                      #Mejor log
log_costo_total
) |>
#Dummies
step_dummy(
arrival_date_year,                #Chance afecta
arrival_date_month,
arrival_date_week_number,
customer_type,
hotel,
meal,
market_segment,
distribution_channel,
reserved_room_type,
assigned_room_type,
deposit_type,
country,
agent,
company,
# cat_adults,
# cat_stays_in_week_nights,
# cat_stays_in_weekend_nights,
# cat_previous_cancellations,
# cat_previous_bookings_not_canceled,
# cat_total_of_special_requests,
# cat_required_car_parking_spaces,
# cat_booking_changes,
# cat_babies
)
# #Interacciones
#
#
# # Numerica vs Categorica
#
# step_interact(terms = ~ is_repeated_guest:starts_with("deposit_type")) |>
# step_interact(terms = ~ log_adr:starts_with("reserved_room_type")) |>
# step_interact(terms = ~ log_lead_time:starts_with("cat_total_of_special_requests")) |>
# step_interact(terms = ~ is_repeated_guest:starts_with("cat_total_of_special_requests")) |>
# step_interact(terms = ~ total_of_special_requests:starts_with("cat_total_of_special_requests")) |>
# step_interact(terms = ~ stays_in_week_nights:starts_with("cat_stays_in_week_nights")) |>
# step_interact(terms = ~ required_car_parking_spaces:starts_with("cat_required_car_parking_spaces")) |>
#
#
# # Numerica vs Numerica
#
# step_interact(terms = ~ log_lead_time:is_repeated_guest) |>
# step_interact(terms = ~ log_lead_time:log_adr) |>
# step_interact(terms = ~ log_lead_time:log_costo_total)
#
#
# Categorica vs Categorica
# step_interact(terms = ~ starts_with("arrival_date_month"):starts_with("arrival_date_year")) |>
# step_interact(terms = ~ starts_with("customer_type"):starts_with("hotel")) |>
# step_interact(terms = ~ starts_with("cat_total_of_special_requests"):starts_with("customer_type") ) |>
# step_interact(terms = ~ starts_with("cat_total_of_special_requests"):starts_with("company")) |>
# step_interact(terms = ~ starts_with("cat_total_of_special_requests"):starts_with("country"))
if (eleccion_modelo == "arboles"){
modelo_arboles <-
# boost_tree(trees = 100, mode = "classification") |>
# boost_tree(trees = 200, mode = "classification") |>
boost_tree(
trees = 800,
mtry = 8,
min_n = 300,
learn_rate = 0.1,
sample_size = 0.6,
loss_reduction	= 1,
tree_depth = 8,
mode = "classification") |>
set_engine("xgboost")
flujo_arboles <- workflow() %>% add_recipe(receta_hoteles) %>%
add_model(modelo_arboles)
flujo_ajustado_arboles <- fit(flujo_arboles, hoteles_ent)
# flujo_arboles <- workflow() %>%
#   add_recipe(receta_hoteles,
#              blueprint = hardhat::default_recipe_blueprint(allow_novel_levels = TRUE)) %>%
#   add_model(modelo_arboles)
#
# flujo_ajustado_arboles <- fit(flujo_arboles, hoteles_ent)
modelo_ajustado_arboles <- flujo_ajustado_arboles %>% extract_fit_parsnip()
logloss_arboles <- cbind(calculate_logloss(flujo_ajustado_arboles, training(hoteles_split)) |>
rename(log_loss_entrena = log_loss_prueba),
calculate_logloss(flujo_ajustado_arboles, testing(hoteles_split)))
logloss_arboles
}
if (eleccion_modelo == "logistico_con_tuning")
{modelo_final <- flujo_ajustado_logistico_tune}
if (eleccion_modelo == "logistico")
{modelo_final <- flujo_ajustado_logistico}
if (eleccion_modelo == "arboles_con_tuning")
{modelo_final <- flujo_ajustado_arboles_tune}
if (eleccion_modelo == "arboles")
{modelo_final <- flujo_ajustado_arboles}
if (eleccion_modelo == "bagging")
{modelo_final <- flujo_ajustado_bag}
hoteles_prueba <- read.csv("Datos/prueba.csv")
hoteles_prueba <- hoteles_prueba |>
#Transformaciones
mutate(
#Variables de caracteres
agent = ifelse(agent %in% new_ca == TRUE, agent,
ifelse(agent %in% new_ca_buenos == TRUE, "BUENO",
ifelse(agent %in% new_ca_malos == TRUE, "MALO","otros"))),
assigned_room_type = ifelse(assigned_room_type  %in% c("L","P"), "otros", assigned_room_type),
company = ifelse(company %in% new_ccs == TRUE, company,
ifelse(company %in% new_ccs_buenos == TRUE, "BUENO","otros")),
country = ifelse(country %in% new_cc == TRUE, country,
ifelse(country %in% new_cc_buenos == TRUE, "BUENO", "otros")),
distribution_channel = ifelse(distribution_channel == "Undefined", "otros", distribution_channel),
market_segment = ifelse(market_segment == "Undefined", "otros", market_segment),
) |>
#Variables derivadas
mutate(
#Variables de caracteres
cat_adults = cut(adults,
breaks =c(0,1,2,Inf), include.lowest = T),
cat_stays_in_week_nights = cut(stays_in_week_nights,
breaks = c(-1,0,5,9,Inf), include.lowest = T),
cat_stays_in_weekend_nights = cut(stays_in_weekend_nights,
breaks = c(-1,0,1,2,3,Inf), include.lowest = T),
cat_previous_cancellations = cut(previous_cancellations,
breaks = c(-1,0,1,5,Inf), include.lowest = T),
cat_previous_bookings_not_canceled = cut(previous_bookings_not_canceled,
breaks = c(-1,0,9,15,Inf), include.lowest = T),
cat_total_of_special_requests = cut(total_of_special_requests,
breaks = c(-1,0, 1, 2, 3, Inf), include.lowest = T),
cat_required_car_parking_spaces = cut(required_car_parking_spaces,
breaks = c(-1,0, Inf), include.lowest = T),
cat_booking_changes = cut(booking_changes, breaks = c(-1,0, Inf), include.lowest = T),
cat_babies = cut(babies, breaks = c(-1,0,Inf), include.lowest = T),
#Variables numericas
log_adr = log(1+adr),
log_lead_time = log(1+lead_time),
costo_total = ifelse(stays_in_week_nights + stays_in_weekend_nights == 0, 0,
(stays_in_week_nights+stays_in_weekend_nights)*adr),
log_costo_total = log(1+costo_total),
igual_reservado = ifelse(reserved_room_type == assigned_room_type, 1,0)
) |>
#Conversion a factores
mutate(
#Variables de tiempo
arrival_date_year = factor(arrival_date_year),
arrival_date_month = factor(arrival_date_month),
arrival_date_week_number = factor(arrival_date_week_number),
#Variables de caracteres
agent = factor(agent),
company = factor(company),
country = factor(country),
assigned_room_type = factor(assigned_room_type),
customer_type = factor(customer_type),
distribution_channel = factor(distribution_channel),
hotel = factor(hotel),
market_segment = factor(market_segment),
meal = factor(meal),
deposit_type = factor(deposit_type),
cat_adults = factor(cat_adults),
cat_stays_in_week_nights = factor(cat_stays_in_week_nights),
cat_stays_in_weekend_nights = factor(cat_stays_in_weekend_nights),
cat_previous_cancellations = factor(cat_previous_cancellations),
cat_previous_bookings_not_canceled = factor(cat_previous_bookings_not_canceled),
cat_total_of_special_requests = factor(cat_total_of_special_requests),
cat_required_car_parking_spaces = factor(cat_required_car_parking_spaces),
cat_booking_changes = factor(cat_booking_changes),
cat_babies = factor(cat_babies)
#Variables numericas
# is_repeated_guest = factor(is_repeated_guest),
# days_in_waiting_list = log(days_in_waiting_list+1E-16),
# booking_changes = log(booking_changes+1E-16)
)
# Si ninios es NA entonces se va a 0 (la mediana), solo hay 4 NA.
hoteles_prueba$children[is.na(hoteles_prueba$children)] <- 0
submission <- tibble(id = hoteles_prueba$id,
prob = predict(modelo_final, hoteles_prueba, type = "prob")$.pred_cancelado )
write.table(submission , file = "submission_1.csv", row.names = FALSE, sep = ",")
hist(submission$prob)
install.packages("leaflet")
if (!require("devtools")) {
install.packages("devtools")
}
# devtools::install_github("diegovalle/mxmaps")
# install.packages("geosphere")
library(geosphere)
# install.packages("tidymodels")
library(tidymodels)
library(leaflet)
library(magrittr)
library(sp)
# library(mxmaps)
library(stringr)
library(readxl)
### Algunas usadas para los mapas
# install.packages("rgdal")
# install.packages("geojsonio")
# install.packages("spdplyr")
# install.packages("rmapshaper")
# install.packages("jsonlite")
# install.packages("highcharter")
#
# library(rgdal)
# library(geojsonio)
# library(spdplyr)
# library(rmapshaper)
# library(jsonlite)
# library(highcharter)
### Mejoras:
# 4. Hay algunas coordenadas que se repiten (p.ej. 414, 415 y 416). Entonces,
# hay que determinar que hacer. Al momento, se estan sobrescribiendo, pero una
# idea podria ser mostrar todos los valores en el popup.
municipios <- list("ACAPONETA"="ACAPONETA","AHUACATLAN"="AHUACATLAN",
"AMATLAN DE CAÑAS"="AMATLAN DE CAÑAS","COMPOSTELA" ="COMPOSTELA",
"COMPOSTELA"="COMPOSTELA","RUIZ"="RUIZ",
"SAN BLAS"="SAN BLAS", "SAN PEDRO LAGUNILLAS"="SAN PEDRO LAGUNILLAS",
"SAN PEDRO LAGUNILLAS"="SAN PEDRO LAGUNILLAS",
"SANTA MARIA DEL ORO"="SANTA MARIA DEL ORO",
"SANTIAGO IXCUINTLA"="SANTIAGO IXCUINTLA",
"TECUALA"="TECUALA","TEPIC"="TEPIC","TUXPAN"="TUXPAN",
"LA YESCA"="LA YESCA","XALISCO"="XALISCO","HUAJICORI"="HUAJICORI",
"IXTLAN DEL RIO"="IXTLAN DEL RIO","JALA"="JALA","ROSAMORADA"="ROSAMORADA",
"BAHIA DE BANDERAS"="BAHIA DE BANDERAS")
install.packages("renv")
renv::init()
setwd("~/Maestría ITAM/Primer Semestre/Estadística Computacional/Tarea 1 - Refugios/Estadistica-Computacional-fall2021/proyectos/RespuestaDesastre/EstCompMAR")
setwd("~/Maestría ITAM/Primer Semestre/Estadística Computacional/Tarea 1 - Refugios/Estadistica-Computacional-fall2021/proyectos/RespuestaDesastre/EstCompMAR")
install.packages("renv")
install.packages("renv")
renv::init()
